name: build
on: [push, pull_request]

jobs:
  build_exe:
    runs-on: windows-2025
    steps:
    - uses: actions/checkout@v4 
    - name: Setup Python
      uses: actions/setup-python@v5.6.0
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: 3.12
        # File containing the Python version to use. Example: .python-version
        #python-version-file: # optional
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        #cache: # optional
        # The target architecture (x86, x64, arm64) of the Python or PyPy interpreter.
        #architecture: # optional
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        #check-latest: # optional
        # The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
        #token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
        # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
        #cache-dependency-path: # optional
        # Set this option if you want the action to update environment variables.
        #update-environment: # optional, default is true
        # When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython.
        #allow-prereleases: # optional
        # When 'true', use the freethreaded version of Python.
        #freethreaded: # optional

    - name: Install Dependencies
      run: pip install -r requirements.txt
    
    # - name: Build exe with Nuitka
    #   run: |
    #     pip install -U nuitka
    #     mkdir -p build
    #     nuitka --lto=yes --output-dir=build CSDemoDownloader.py
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuitka-build
        path: build
        retention-days: 1  # 临时存储

  
  publish_release:
    needs: [build_exe]  # 依赖构建任务
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # 仅在push事件触发
    permissions:
      contents: write  # 需要写入权限发布Release
    steps:
    - uses: actions/checkout@v4
    
    # 下载构建产物
    # - name: Download Artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: nuitka-build
    #     path: build

    # 获取短SHA
    - name: Extract Short SHA
      run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    # 使用环境变量
    - name: Create Source Archive
      run: git archive --format=zip -o source-${{ env.SHORT_SHA }}.zip HEAD
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ env.SHORT_SHA }}
        name: "Build ${{ env.SHORT_SHA }}"
        body: |
          ${{ github.event.head_commit.message }}
          Commit: ${{ env.SHORT_SHA }}
          Auto-generated by GitHub Actions
        files: |
          build/*.exe
          source-${{ env.SHORT_SHA }}.zip
        draft: false
        prerelease: yes
